'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
  return typeof obj;
} : function (obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
};

// -----------------------------------------------------------------------------
// Init

var initializeGlobalNamespace = function initializeGlobalNamespace() {
  var namespace = void 0;
  if ((typeof window === 'undefined' ? 'undefined' : _typeof(window)) === 'object') {
    namespace = window.filestackInternals;
    if (!namespace) {
      namespace = {};
      window.filestackInternals = namespace;
    }
    if (!namespace.loader) {
      namespace.loader = {
        modules: {}
      };
    }
  }
  return namespace;
};

var filestackInternals = initializeGlobalNamespace();

// -----------------------------------------------------------------------------
// Modules loading

// All modules share global "register", so different instances of loader can
// communicate which modules were already loaded and which not.
var modules = filestackInternals && filestackInternals.loader.modules;

var loadModule = function loadModule(url, moduleId) {
  var moduleDefinition = modules[url];
  if (!moduleDefinition) {
    modules[url] = {};
    moduleDefinition = modules[url];
  }

  if (moduleDefinition.instance) {
    return Promise.resolve(moduleDefinition.instance);
  }

  if (moduleDefinition.promise) {
    return moduleDefinition.promise;
  }

  var promise = new Promise(function (resolve, reject) {
    var embedScript = function embedScript() {
      moduleDefinition.resolvePromise = resolve;
      var script = document.createElement('script');
      script.src = url;
      script.onerror = reject;
      if (moduleId) script.id = moduleId;
      document.body.appendChild(script);
    };

    var checkIfDomReady = function checkIfDomReady() {
      if (document.readyState === 'complete') {
        embedScript();
      } else {
        setTimeout(checkIfDomReady, 50);
      }
    };

    checkIfDomReady();
  });

  moduleDefinition.promise = promise;

  return promise;
};

var registerReadyModule = function registerReadyModule(instance, moduleId) {
  var thisScript = void 0;
  if (moduleId && document.getElementById(moduleId)) {
    thisScript = document.getElementById(moduleId);
  } else {
    var scriptTags = document.getElementsByTagName('script');
    thisScript = scriptTags[scriptTags.length - 1];
  }
  var url = thisScript.getAttribute('src');
  var moduleDefinition = modules[url];
  if (moduleDefinition && moduleDefinition.resolvePromise) {
    moduleDefinition.instance = instance;
    moduleDefinition.resolvePromise(instance);
    delete moduleDefinition.promise;
    delete moduleDefinition.resolvePromise;
  }
};

// -----------------------------------------------------------------------------
// CSS loading

var loadCss = function loadCss(url) {
  var alreadyAddedThisTag = document.querySelector('link[href="' + url + '"]');
  if (alreadyAddedThisTag !== null) {
    return Promise.resolve();
  }

  return new Promise(function (resolve) {
    var head = document.getElementsByTagName('head')[0];
    var link = document.createElement('link');

    var loaded = function loaded() {
      resolve();
      link.removeEventListener('load', loaded);
    };

    link.rel = 'stylesheet';
    link.href = url;
    link.addEventListener('load', loaded);
    head.appendChild(link);
  });
};

var knownModuleIds = {
  picker: '__filestack-picker-module'
};

exports.loadModule = loadModule;
exports.registerReadyModule = registerReadyModule;
exports.loadCss = loadCss;
exports.knownModuleIds = knownModuleIds;
//# sourceMappingURL=loader.js.map
